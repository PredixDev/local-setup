#!/usr/bin/env groovy
@Library('devrel') _
def complianceEnabled = true;
def pullRequest = env.CHANGE_ID
def pullTarget = env.CHANGE_TARGET
def org = "adoption"
def repoName = "local-setup"
def branchName = env.BRANCH_NAME
def pop = "uswest"
def jobName = "util-local-setup"
def buildDependencyJobs = ""
def dependencyRepos = ""
def dependencyJobs = ""
def quickstartScript = ""
def uiAppName = ""
def uiTestJobName = ""

pipeline {
  agent none
  options {
      buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '10'))
  }
  environment {
    COMPLIANCEENABLED = true
    CF_AWS_CREDS = credentials('cf_aws_creds')
    DEVCLOUD_ARTIFACTORY_CREDS = credentials('devcloud_artifactory_creds')
    EXT_GITHUB_CREDS = credentials('external_git_creds')
    EXT_ARTIFACTORY_USER_CREDS = credentials('external_artifactory_user_creds')
  }
  parameters {
    string(name: 'BUILD', defaultValue: 'true', description: 'checkout, build, test and/or deploy')
    string(name: 'INCREMENT', defaultValue: 'none', description: 'increment version - patch | major | minor')
    string(name: 'INCREMENT_DEPENDENCIES', defaultValue: 'false', description: 'point at latest dependencies in develop')
    string(name: 'MERGE_MASTER', defaultValue: 'false', description: 'merge to master')
    string(name: 'RELEASE', defaultValue: 'false', description: 'release master to production')
    string(name: 'SMOKE_TEST', defaultValue: 'false', description: 'run smoketests in production')
  }
  stages {
    stage("Build, Test, and/or Deploy" ) {
      when {
        allOf { environment name: 'BUILD', value: 'true'; environment name: 'MERGE_MASTER', value: 'false';  environment name: 'INCREMENT', value: 'none'; environment name: 'INCREMENT_DEPENDENCIES', value: 'false';  environment name: 'RELEASE', value: 'false'; environment name: 'SMOKE_TEST', value: 'false'; }
      }
      agent {
          label 'windows2016-raw'
      }
      steps {
        echo "The workspace is ${env.WORKSPACE}"	    
        script {
          echo 'Stage Build, Test, Deploy'
          def status = powershell(returnStatus: true, script: 'ipconfig')
          if (status == 0) {
            echo "powershell success"
          }
          else {
            echo "powershell failed"
          }
        }
      }
      post {
        success {
          echo "Build, Test, Deploy stage completed successfully"
        }
        failure {
          script {
            echo "Build, Test, Deploy stage failed"
          } 
        }
      }
    }
  }
}
