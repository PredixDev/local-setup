#!/usr/bin/env groovy
@Library('devrel') _
def complianceEnabled = true;
def pullRequest = env.CHANGE_ID
def pullTarget = env.CHANGE_TARGET
def org = "adoption"
def repoName = "local-setup"
def branchName = env.BRANCH_NAME
def pop = "uswest"
def jobName = "util-local-setup"
def buildDependencyJobs = ""
def dependencyRepos = ""
def dependencyJobs = ""
def quickstartScript = ""
def uiAppName = ""
def uiTestJobName = ""

pipeline {
  agent none
  options {
      buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '10'))
  }
  environment {
    COMPLIANCEENABLED = true
    CF_AWS_CREDS = credentials('cf_aws_creds')
    DEVCLOUD_ARTIFACTORY_CREDS = credentials('devcloud_artifactory_creds')
    EXT_GITHUB_CREDS = credentials('external_git_creds')
    EXT_ARTIFACTORY_USER_CREDS = credentials('external_artifactory_user_creds')
  }
  parameters {
    string(name: 'BUILD', defaultValue: 'true', description: 'checkout, build, test and/or deploy')
    string(name: 'INCREMENT', defaultValue: 'none', description: 'increment version - patch | major | minor')
    string(name: 'INCREMENT_DEPENDENCIES', defaultValue: 'false', description: 'point at latest dependencies in develop')
    string(name: 'MERGE_MASTER', defaultValue: 'false', description: 'merge to master')
    string(name: 'RELEASE', defaultValue: 'false', description: 'release master to production')
    string(name: 'SMOKE_TEST', defaultValue: 'false', description: 'run smoketests in production')
  }
  stages {
    stage("Checkout" ) {
      agent {
        docker {
          label 'windows2016-raw'
        }
      }
      steps {
        echo "The workspace is ${env.WORKSPACE}"	    
        script {
          echo 'Stage Checkout'
          internalrelease.checkoutPropelSharedLibrary()
        }
      }
      post {
        success {
          echo "Checkout stage completed successfully"
        }
        failure {
          echo "Checkout stage failed"
        }
      }
    }
    stage("Build, Test, and/or Deploy" ) {
      when {
        allOf { environment name: 'BUILD', value: 'true'; environment name: 'MERGE_MASTER', value: 'false';  environment name: 'INCREMENT', value: 'none'; environment name: 'INCREMENT_DEPENDENCIES', value: 'false';  environment name: 'RELEASE', value: 'false'; environment name: 'SMOKE_TEST', value: 'false'; }
      }
      steps {
        echo "The workspace is ${env.WORKSPACE}"	    
        script {
          echo 'Stage Build, Test, Deploy'
          internalrelease.build(org, repoName, branchName, jobName, buildDependencyJobs.split(','), quickstartScript)
        }
      }
      post {
        success {
          echo "Build, Test, Deploy stage completed successfully"
        }
        failure {
          script {
            echo "Build, Test, Deploy stage failed"
            internalrelease.buildFailed(repoName)
          } 
        }
      }
    }
    stage('IncrementVersion') {  
      when {
        branch 'develop'
        environment name: 'INCREMENT', value: 'patch'
      }
      steps {
        script {
          echo 'Stage IncrementVersion - run this stage when merge to master is completed and increment on develop'
          internalrelease.incrementVersion(org, repoName, env.INCREMENT)
        }
        
      }
      post {
        success {
          echo "IncrementVersion stage completed, time to trigger increment dependencies on dependent projects to point at my new version"
        }
        failure {
          echo "IncrementVersion stage failed"
        }
      }
    }
    stage('IncrementVersionInDependencies') {
      when {
        branch 'develop'
        environment name: 'INCREMENT_DEPENDENCIES', value: 'true'
      }
      steps {
        script {
          echo 'Stage IncrementVersionInDependencies - run this stage - when version of dependencies have changed, to point at latest'
          internalrelease.incrementDependencies(org, repoName)
        }
      }
      post {
        success {
          echo "IncrementVersionInDependencies stage completed successfully"
        }
        failure {
          echo "IncrementVersionInDependencies stage failed"
        }
      }
    }
    stage('MergeToDevelop') {
      when {
        environment name: 'CHANGE_TARGET', value: 'develop'
      }
      steps {
        script {
          echo 'Stage MergeToDevelop'
          internalrelease.mergeToDevelop()
        }           
      }
    }
    stage('MergeMaster') {
      when {
        branch 'develop'
        anyOf { environment name: 'MERGE_MASTER', value: 'true';  }
      }
      steps {
        script {
          internalrelease.mergeToMaster(org, repoName, dependencyRepos, dependencyJobs)
        }
      }
      post {
        success {
          echo "MergeMaster completed successfully"
        }
        failure {
          echo "MergeMaster failed"
        }
      }
    }
    stage("Release, SmokeTest" ) {
      when {
        environment name: 'RELEASE', value: 'true'
      }
      steps {
        script {
          echo 'Stage Release, SmokeTest'
          externalrelease.release(org, repoName, branchName, jobName, dependencyRepos, dependencyJobs)
        }
      }
      post {
        success {
          echo "Release completed successfully"
        }
        failure {
          echo "Release failed"
        }
      }
    }
    stage('SmokeTest') {
      when {
        environment name: 'SMOKE_TEST', value: 'true'
      }
      steps {
        script {
          externalrelease.smokeTest(repoName, branchName, jobName)
        }
      }
      post {
        success {
          echo "SmokeTest stage completed successfuly"
        }
        failure {
          echo "SmokeTest stage failed"
        }
        always {
          script {
            notifications.sendMail()
          }
        }
      }
    }
  }
  post {
    always {
      script {
        internalrelease.cleanupAfterJob()
        notifications.sendFlowdockMsg()
      }
    }
  }
}
